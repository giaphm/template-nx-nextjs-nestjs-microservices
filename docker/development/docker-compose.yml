services:
  next-app:
    container_name: next-app
    build:
      context: ../../
      dockerfile: ./apps/next-app/Dockerfile
      target: development
    # Set environment variables directly in the docker-compose file
    # environment:
    # ENV_VARIABLE: "ENV_VARIABLE"
    # NEXT_PUBLIC_ENV_VARIABLE: "NEXT_PUBLIC_ENV_VARIABLE"
    env_file:
      - '../../.env'
    command: pnpm dev:next-app
    volumes:
      - staticbuild:/app/node_modules
      - ../..:/app
    restart: always
    # ports:
    #   - 3000:3000
    networks:
      - development_networks

  nginx:
    build:
      context: ../../nginx
      # dockerfile: nginx/Dockerfile
    depends_on:
      - next-app
    ports:
      - 80:80
    networks:
      - development_networks

  nestjs-analytics:
    container_name: nestjs-analytics
    build:
      context: ../../
      dockerfile: ./apps/template-nestjs-analytics/Dockerfile
      target: development
    volumes:
      - staticbuild:/usr/src/app/node_modules
      - ../..:/usr/src/app
    env_file:
      - ../../.env
    # command: pnpm start:dev
    command: sh -c "dockerize -wait tcp://zookeeper:2181 -wait tcp://kafka:9092 -wait tcp://postgres:5432 -wait tcp://redis:6379 -timeout 60s pnpm serve:template-nestjs-analytics"
    ports:
      - 3002:3002
    depends_on:
      - redis
      - kafka
    networks:
      - development_networks

  nestjs-backend:
    container_name: nestjs-backend
    build:
      context: ../../
      dockerfile: ./apps/template-nestjs-backend/Dockerfile
      target: development
    volumes:
      - staticbuild:/usr/src/app/node_modules
      - ../..:/usr/src/app
    env_file:
      - ../../.env
    # command: pnpm start:dev
    # command: pnpm serve:template-nestjs-backend
    command: sh -c "dockerize -wait tcp://zookeeper:2181 -wait tcp://kafka:9092 -wait tcp://postgres:5432 -wait tcp://redis:6379 -timeout 60s pnpm serve:template-nestjs-backend"
    ports:
      - 3001:3001
    depends_on:
      - redis
      - kafka
    networks:
      - development_networks

  nestjs-communication:
    container_name: nestjs-communication
    build:
      context: ../../
      dockerfile: ./apps/template-nestjs-communication/Dockerfile
      target: development
    volumes:
      - staticbuild:/usr/src/app/node_modules
      - ../..:/usr/src/app
    env_file:
      - ../../.env
    # command: pnpm start:dev
    command: sh -c "dockerize -wait tcp://zookeeper:2181 -wait tcp://kafka:9092 -wait tcp://postgres:5432 -wait tcp://redis:6379 -timeout 60s pnpm serve:template-nestjs-communication"
    depends_on:
      - redis
      - kafka
    networks:
      - development_networks

  redis:
    image: redis
    ports:
      - 6379:6379
    volumes:
      - redis:/data
    networks:
      - development_networks

  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: docker-nest-postgres
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      DATABASE_URL: postgresql://username:password@postgres:5432/docker-nest-postgres?schema=public
    ports:
      - '5432:5432'
    volumes:
      - docker-nest-postgres:/var/lib/postgresql/data
    networks:
      - development_networks

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: 'no'
    ports:
      - '9000:9000'
    environment:
      KAFKA_BROKERCONNECT: 'kafka:9092'
    depends_on:
      - 'kafka'
    networks:
      - development_networks

  # kafka:
  #   image: obsidiandynamics/kafka
  #   restart: "no"
  #   ports:
  #     - "2181:2181"
  #     - "9092:9092"
  #   environment:
  #     KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
  #     KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
  #     KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
  #     KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
  #     KAFKA_RESTART_ATTEMPTS: "10"
  #     KAFKA_RESTART_DELAY: "5"
  #     ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"

  # zoo1:
  #   image: confluentinc/cp-zookeeper:7.3.2
  #   hostname: zoo1
  #   container_name: zoo1
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_SERVER_ID: 1
  #     ZOOKEEPER_SERVERS: zoo1:2888:3888

  # kafka1:
  #   image: confluentinc/cp-kafka:7.3.2
  #   hostname: kafka1
  #   container_name: kafka1
  #   ports:
  #     - "9092:9092"
  #     - "29092:29092"
  #     - "9999:9999"
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_JMX_PORT: 9999
  #     KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
  #     KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
  #     KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
  #   depends_on:
  #     - zoo1

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - development_networks

  kafka:
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    # An important note about accessing Kafka from clients on other machines:
    # -----------------------------------------------------------------------
    #
    # The config used here exposes port 29092 for _external_ connections to the broker
    # i.e. those from _outside_ the docker network. This could be from the host machine
    # running docker, or maybe further afield if you've got a more complicated setup.
    # If the latter is true, you will need to change the value 'localhost' in
    # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those
    # remote clients
    #
    # For connections _internal_ to the docker network, such as from other services
    # and components, use kafka:9092.
    #
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    #
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - development_networks

networks:
  development_networks:
    driver: bridge

volumes:
  staticbuild:
  redis:
    driver: local
  docker-nest-postgres:
